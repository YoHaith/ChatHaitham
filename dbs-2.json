[
    {
      "question": "What is a relation?",
      "Title": "Relation definition:",
      "answer": "A relation in the context of databases refers to a table that stores data in rows and columns. In a relational database, a relation represents a set of related data organized in a tabular format, where each row represents a record and each column represents an attribute or field of that record. Relations are fundamental to the relational model of databases and are used to establish connections and dependencies between different entities or data elements."
    },
    {
      "question": "What are the defining properties of the relational algebra?",
      "Title":"The defining properties of the relational algebra:",
      "answer": "The defining properties of relational algebra include the following key aspects:\n\n1. Closure: Operations in relational algebra produce results that are also relations, ensuring that the output of any operation on relations is also a relation.\n\n2. Completeness: Relational algebra provides a set of operations that can perform any database query, making it a complete query language.\n\n3. Uniqueness: The results of relational algebra operations are sets, meaning they do not contain duplicate tuples, ensuring uniqueness in the output.\n\n4. Consistency: Relational algebra operations maintain consistency with the relational model, adhering to the principles of relational databases.\n\n5. Integrity: Relational algebra supports the enforcement of integrity constraints to maintain data accuracy and consistency within the database.\n\nThese defining properties make relational algebra a powerful and essential tool for querying and manipulating data in relational databases."
    },
    {
      "question": "How are objects from the real world represented in a relational database?",
      "Title":"The representation of objects fromthe real world in a relational database:",
      "answer": "Objects from the real world are represented in a relational database through the concept of tables and relationships. In a relational database:\n\n1. Entities: Real-world objects or concepts are represented as entities, and each entity is mapped to a table in the database. For example, a 'Customer' entity may correspond to a 'Customers' table.\n\n2. Attributes: Properties or characteristics of entities are represented as attributes in the table columns. Each attribute corresponds to a specific piece of information about the entity. For instance, a 'Customer' entity may have attributes such as 'CustomerID,' 'Name,' 'Email,' etc.\n\n3. Relationships: Connections between entities are established through relationships in the database. Relationships define how different entities are related to each other. For example, a 'Customer' entity may have a relationship with an 'Orders' entity through a 'CustomerID' attribute.\n\nBy organizing real-world objects into tables, defining attributes for each entity, and establishing relationships between entities, relational databases provide a structured and efficient way to represent and manage data from the real world."
    },
    { 
      "question": "How can tables in SQL be defined and manipulated?",
      "Title":"Table Defining and Manipulation:",
      "answer": "Tables in SQL can be defined and manipulated using Data Definition Language (DDL) and Data Manipulation Language (DML) statements. Here is an overview of how tables in SQL can be defined and manipulated:\n\n1. Defining Tables:\n   - CREATE TABLE statement: Used to create a new table in the database. This statement specifies the table name, column names, data types, constraints, and other properties.\n   Example:\n   ```sql\n   CREATE TABLE Employees (\n       EmployeeID INT PRIMARY KEY,\n       FirstName VARCHAR(50),\n       LastName VARCHAR(50),\n       DepartmentID INT,\n       Salary DECIMAL(10, 2)\n   );\n   ```\n\n2. Manipulating Tables:\n   - INSERT INTO statement: Used to insert new rows of data into a table.\n   Example:\n   ```sql\n   INSERT INTO Employees (EmployeeID, FirstName, LastName, DepartmentID, Salary)\n   VALUES (1, 'John', 'Doe', 101, 50000.00);\n   ```\n\n   - SELECT statement: Used to retrieve data from one or more tables.\n   Example:\n   ```sql\n   SELECT * FROM Employees WHERE DepartmentID = 101;\n   ```\n\n   - UPDATE statement: Used to modify existing data in a table.\n   Example:\n   ```sql\n   UPDATE Employees SET Salary = 55000.00 WHERE EmployeeID = 1;\n   ```\n\n   - DELETE statement: Used to remove rows from a table.\n   Example:\n   ```sql\n   DELETE FROM Employees WHERE EmployeeID = 1;\n   ```\n\nBy using these SQL statements for data definition and manipulation, users can create, modify, retrieve, and delete data in tables within a relational database management system."
    },
    {
      "question": "What are integrity constraints?",
      "Title":"Integrity Constraints:",
      "answer": "Integrity constraints in a database are rules that help ensure the accuracy, consistency, and reliability of the data stored within the database. These constraints define the permissible data values that can be stored in specific columns or tables. There are several types of integrity constraints commonly used in databases:\n\n1. Primary Key Constraint: Ensures that each row in a table is uniquely identified by a primary key column or a combination of columns. This constraint prevents duplicate and null values in the primary key column(s).\n\n2. Foreign Key Constraint: Enforces referential integrity between two tables by ensuring that values in a foreign key column match values in a primary key column of another table. This constraint helps maintain relationships between related tables.\n\n3. Unique Constraint: Ensures that all values in a column or a combination of columns are unique, except for null values. This constraint prevents duplicate entries in the specified column(s).\n\n4. Check Constraint: Defines a condition that must be satisfied for data to be entered or modified in a column. This constraint allows users to enforce specific rules or conditions on the data values.\n\n5. Not Null Constraint: Specifies that a column cannot contain null values. This constraint ensures that every row must have a valid value for the specified column.\n\nBy applying these integrity constraints to tables in a database, data integrity is maintained, data quality is improved, and the database remains consistent and reliable."
    }
  ]
  